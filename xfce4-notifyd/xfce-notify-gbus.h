/*
 * Generated by gdbus-codegen 2.50.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __XFCE4_NOTIFYD_XFCE_NOTIFY_GBUS_H__
#define __XFCE4_NOTIFYD_XFCE_NOTIFY_GBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Notifications */

#define XFCE_NOTIFY_TYPE_GBUS (xfce_notify_gbus_get_type ())
#define XFCE_NOTIFY_GBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_NOTIFY_TYPE_GBUS, XfceNotifyGBus))
#define XFCE_NOTIFY_IS_GBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_NOTIFY_TYPE_GBUS))
#define XFCE_NOTIFY_GBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFCE_NOTIFY_TYPE_GBUS, XfceNotifyGBusIface))

struct _XfceNotifyGBus;
typedef struct _XfceNotifyGBus XfceNotifyGBus;
typedef struct _XfceNotifyGBusIface XfceNotifyGBusIface;

struct _XfceNotifyGBusIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_close_notification) (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation,
    guint arg_id);

  gboolean (*handle_get_capabilities) (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_server_information) (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_notify) (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_name,
    guint arg_replaces_id,
    const gchar *arg_app_icon,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *const *arg_actions,
    GVariant *arg_hints,
    gint arg_expire_timeout);

  void (*action_invoked) (
    XfceNotifyGBus *object,
    guint arg_id,
    const gchar *arg_action_key);

  void (*notification_closed) (
    XfceNotifyGBus *object,
    guint arg_id,
    guint arg_reason);

};

GType xfce_notify_gbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfce_notify_gbus_interface_info (void);
guint xfce_notify_gbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfce_notify_gbus_complete_get_capabilities (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *capabilities);

void xfce_notify_gbus_complete_notify (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation,
    guint id);

void xfce_notify_gbus_complete_close_notification (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation);

void xfce_notify_gbus_complete_get_server_information (
    XfceNotifyGBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *name,
    const gchar *vendor,
    const gchar *version,
    const gchar *spec_version);



/* D-Bus signal emissions functions: */
void xfce_notify_gbus_emit_notification_closed (
    XfceNotifyGBus *object,
    guint arg_id,
    guint arg_reason);

void xfce_notify_gbus_emit_action_invoked (
    XfceNotifyGBus *object,
    guint arg_id,
    const gchar *arg_action_key);



/* D-Bus method calls: */
void xfce_notify_gbus_call_get_capabilities (
    XfceNotifyGBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_notify_gbus_call_get_capabilities_finish (
    XfceNotifyGBus *proxy,
    gchar ***out_capabilities,
    GAsyncResult *res,
    GError **error);

gboolean xfce_notify_gbus_call_get_capabilities_sync (
    XfceNotifyGBus *proxy,
    gchar ***out_capabilities,
    GCancellable *cancellable,
    GError **error);

void xfce_notify_gbus_call_notify (
    XfceNotifyGBus *proxy,
    const gchar *arg_app_name,
    guint arg_replaces_id,
    const gchar *arg_app_icon,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *const *arg_actions,
    GVariant *arg_hints,
    gint arg_expire_timeout,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_notify_gbus_call_notify_finish (
    XfceNotifyGBus *proxy,
    guint *out_id,
    GAsyncResult *res,
    GError **error);

gboolean xfce_notify_gbus_call_notify_sync (
    XfceNotifyGBus *proxy,
    const gchar *arg_app_name,
    guint arg_replaces_id,
    const gchar *arg_app_icon,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *const *arg_actions,
    GVariant *arg_hints,
    gint arg_expire_timeout,
    guint *out_id,
    GCancellable *cancellable,
    GError **error);

void xfce_notify_gbus_call_close_notification (
    XfceNotifyGBus *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_notify_gbus_call_close_notification_finish (
    XfceNotifyGBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfce_notify_gbus_call_close_notification_sync (
    XfceNotifyGBus *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GError **error);

void xfce_notify_gbus_call_get_server_information (
    XfceNotifyGBus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_notify_gbus_call_get_server_information_finish (
    XfceNotifyGBus *proxy,
    gchar **out_name,
    gchar **out_vendor,
    gchar **out_version,
    gchar **out_spec_version,
    GAsyncResult *res,
    GError **error);

gboolean xfce_notify_gbus_call_get_server_information_sync (
    XfceNotifyGBus *proxy,
    gchar **out_name,
    gchar **out_vendor,
    gchar **out_version,
    gchar **out_spec_version,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFCE_NOTIFY_TYPE_GBUS_PROXY (xfce_notify_gbus_proxy_get_type ())
#define XFCE_NOTIFY_GBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_NOTIFY_TYPE_GBUS_PROXY, XfceNotifyGBusProxy))
#define XFCE_NOTIFY_GBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCE_NOTIFY_TYPE_GBUS_PROXY, XfceNotifyGBusProxyClass))
#define XFCE_NOTIFY_GBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCE_NOTIFY_TYPE_GBUS_PROXY, XfceNotifyGBusProxyClass))
#define XFCE_NOTIFY_IS_GBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_NOTIFY_TYPE_GBUS_PROXY))
#define XFCE_NOTIFY_IS_GBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCE_NOTIFY_TYPE_GBUS_PROXY))

typedef struct _XfceNotifyGBusProxy XfceNotifyGBusProxy;
typedef struct _XfceNotifyGBusProxyClass XfceNotifyGBusProxyClass;
typedef struct _XfceNotifyGBusProxyPrivate XfceNotifyGBusProxyPrivate;

struct _XfceNotifyGBusProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfceNotifyGBusProxyPrivate *priv;
};

struct _XfceNotifyGBusProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfce_notify_gbus_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfceNotifyGBusProxy, g_object_unref)
#endif

void xfce_notify_gbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfceNotifyGBus *xfce_notify_gbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfceNotifyGBus *xfce_notify_gbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfce_notify_gbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfceNotifyGBus *xfce_notify_gbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfceNotifyGBus *xfce_notify_gbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFCE_NOTIFY_TYPE_GBUS_SKELETON (xfce_notify_gbus_skeleton_get_type ())
#define XFCE_NOTIFY_GBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_NOTIFY_TYPE_GBUS_SKELETON, XfceNotifyGBusSkeleton))
#define XFCE_NOTIFY_GBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCE_NOTIFY_TYPE_GBUS_SKELETON, XfceNotifyGBusSkeletonClass))
#define XFCE_NOTIFY_GBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCE_NOTIFY_TYPE_GBUS_SKELETON, XfceNotifyGBusSkeletonClass))
#define XFCE_NOTIFY_IS_GBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_NOTIFY_TYPE_GBUS_SKELETON))
#define XFCE_NOTIFY_IS_GBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCE_NOTIFY_TYPE_GBUS_SKELETON))

typedef struct _XfceNotifyGBusSkeleton XfceNotifyGBusSkeleton;
typedef struct _XfceNotifyGBusSkeletonClass XfceNotifyGBusSkeletonClass;
typedef struct _XfceNotifyGBusSkeletonPrivate XfceNotifyGBusSkeletonPrivate;

struct _XfceNotifyGBusSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfceNotifyGBusSkeletonPrivate *priv;
};

struct _XfceNotifyGBusSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfce_notify_gbus_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfceNotifyGBusSkeleton, g_object_unref)
#endif

XfceNotifyGBus *xfce_notify_gbus_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Notifyd */

#define XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD (xfce_notify_org_xfce_notifyd_get_type ())
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD, XfceNotifyOrgXfceNotifyd))
#define XFCE_NOTIFY_IS_ORG_XFCE_NOTIFYD(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD))
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD, XfceNotifyOrgXfceNotifydIface))

struct _XfceNotifyOrgXfceNotifyd;
typedef struct _XfceNotifyOrgXfceNotifyd XfceNotifyOrgXfceNotifyd;
typedef struct _XfceNotifyOrgXfceNotifydIface XfceNotifyOrgXfceNotifydIface;

struct _XfceNotifyOrgXfceNotifydIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_quit) (
    XfceNotifyOrgXfceNotifyd *object,
    GDBusMethodInvocation *invocation);

};

GType xfce_notify_org_xfce_notifyd_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfce_notify_org_xfce_notifyd_interface_info (void);
guint xfce_notify_org_xfce_notifyd_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfce_notify_org_xfce_notifyd_complete_quit (
    XfceNotifyOrgXfceNotifyd *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void xfce_notify_org_xfce_notifyd_call_quit (
    XfceNotifyOrgXfceNotifyd *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_notify_org_xfce_notifyd_call_quit_finish (
    XfceNotifyOrgXfceNotifyd *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfce_notify_org_xfce_notifyd_call_quit_sync (
    XfceNotifyOrgXfceNotifyd *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_PROXY (xfce_notify_org_xfce_notifyd_proxy_get_type ())
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_PROXY, XfceNotifyOrgXfceNotifydProxy))
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_PROXY, XfceNotifyOrgXfceNotifydProxyClass))
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_PROXY, XfceNotifyOrgXfceNotifydProxyClass))
#define XFCE_NOTIFY_IS_ORG_XFCE_NOTIFYD_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_PROXY))
#define XFCE_NOTIFY_IS_ORG_XFCE_NOTIFYD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_PROXY))

typedef struct _XfceNotifyOrgXfceNotifydProxy XfceNotifyOrgXfceNotifydProxy;
typedef struct _XfceNotifyOrgXfceNotifydProxyClass XfceNotifyOrgXfceNotifydProxyClass;
typedef struct _XfceNotifyOrgXfceNotifydProxyPrivate XfceNotifyOrgXfceNotifydProxyPrivate;

struct _XfceNotifyOrgXfceNotifydProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfceNotifyOrgXfceNotifydProxyPrivate *priv;
};

struct _XfceNotifyOrgXfceNotifydProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfce_notify_org_xfce_notifyd_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfceNotifyOrgXfceNotifydProxy, g_object_unref)
#endif

void xfce_notify_org_xfce_notifyd_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfceNotifyOrgXfceNotifyd *xfce_notify_org_xfce_notifyd_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfceNotifyOrgXfceNotifyd *xfce_notify_org_xfce_notifyd_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfce_notify_org_xfce_notifyd_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfceNotifyOrgXfceNotifyd *xfce_notify_org_xfce_notifyd_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfceNotifyOrgXfceNotifyd *xfce_notify_org_xfce_notifyd_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_SKELETON (xfce_notify_org_xfce_notifyd_skeleton_get_type ())
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_SKELETON, XfceNotifyOrgXfceNotifydSkeleton))
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_SKELETON, XfceNotifyOrgXfceNotifydSkeletonClass))
#define XFCE_NOTIFY_ORG_XFCE_NOTIFYD_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_SKELETON, XfceNotifyOrgXfceNotifydSkeletonClass))
#define XFCE_NOTIFY_IS_ORG_XFCE_NOTIFYD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_SKELETON))
#define XFCE_NOTIFY_IS_ORG_XFCE_NOTIFYD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCE_NOTIFY_TYPE_ORG_XFCE_NOTIFYD_SKELETON))

typedef struct _XfceNotifyOrgXfceNotifydSkeleton XfceNotifyOrgXfceNotifydSkeleton;
typedef struct _XfceNotifyOrgXfceNotifydSkeletonClass XfceNotifyOrgXfceNotifydSkeletonClass;
typedef struct _XfceNotifyOrgXfceNotifydSkeletonPrivate XfceNotifyOrgXfceNotifydSkeletonPrivate;

struct _XfceNotifyOrgXfceNotifydSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfceNotifyOrgXfceNotifydSkeletonPrivate *priv;
};

struct _XfceNotifyOrgXfceNotifydSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfce_notify_org_xfce_notifyd_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfceNotifyOrgXfceNotifydSkeleton, g_object_unref)
#endif

XfceNotifyOrgXfceNotifyd *xfce_notify_org_xfce_notifyd_skeleton_new (void);


G_END_DECLS

#endif /* __XFCE4_NOTIFYD_XFCE_NOTIFY_GBUS_H__ */
